{"version":3,"sources":["CameraList.tsx","CameraViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["a","navigator","mediaDevices","getUserMedia","video","audio","then","stream","getVideoTracks","forEach","t","stop","enumerateDevices","CameraList","useState","devices","setDevices","cameraList","setCameraList","useEffect","filter","d","kind","map","label","value","deviceId","readOnly","contentEditable","getCameraList","catch","e","console","log","onClick","CameraViewer","props","el","useRef","document","createElement","settings","setSettings","constraint","length","JSON","parse","current","srcObject","c","stringify","getSettings","onloadedmetadata","play","ref","style","object_fit","width","height","rows","cols","App","setConstraint","actualConstraint","setActualConstraint","onChange","ev","target","placeholder","colSpan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dea9a44f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nasync function getCameraList (): Promise<MediaDeviceInfo[]> {\n  await navigator.mediaDevices\n    .getUserMedia({\n      video: true,\n      audio: false\n    })\n    .then(stream => stream.getVideoTracks().forEach(t => t.stop()))\n  return navigator.mediaDevices.enumerateDevices()\n}\n\nfunction CameraList () {\n  const [devices, setDevices] = useState<MediaDeviceInfo[]>([])\n  const [cameraList, setCameraList] = useState([] as any[])\n\n  useEffect(() => {\n    setCameraList(\n      devices\n        .filter(d => d.kind === 'videoinput')\n        .map(d => (\n          <tr key={d.deviceId}>\n            <td>{d.label}</td>\n            <td>\n              <textarea\n                value={`{\n  \"video\": {\n    \"deviceId\": \"${d.deviceId}\",\n    \"width\": 1280,\n    \"height\": 720\n  }\n}`}\n                readOnly={true}\n                contentEditable={false}\n              ></textarea>\n            </td>\n          </tr>\n        ))\n    )\n  }, [devices])\n\n  const enumerateDevices = () => {\n    getCameraList()\n      .then((devices: MediaDeviceInfo[]) => setDevices(devices))\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n  const handleClick = () => {\n    enumerateDevices()\n  }\n\n  useEffect(() => {\n    enumerateDevices()\n  }, [])\n\n  return (\n    <div>\n      <button onClick={handleClick}>列挙</button>\n      <table>\n        <thead>\n          <tr>\n            <th>ラベル</th>\n            <th>制約</th>\n          </tr>\n        </thead>\n        <tbody>{cameraList}</tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default CameraList\n","import React, { useEffect, useRef, useState } from 'react';\n\ntype Props = {\n  constraint: string;\n}\n\nconst CameraViewer: React.FC<Props> = props => {\n  const el = useRef(document.createElement(\"video\"));\n  const [settings, setSettings] = useState(\"ここにVideoTrackのsettings()が出ます\");\n\n  useEffect(() => {\n    try{\n      if (props.constraint.length === 0) return;\n      const constraint = JSON.parse(props.constraint);\n      console.log(constraint);\n      navigator.mediaDevices.getUserMedia(constraint).then(stream => {\n        console.log(\"Stream opened\");\n        \n        if(el.current.srcObject) {\n          (el.current.srcObject as MediaStream).getVideoTracks().forEach(c => c.stop());\n          el.current.srcObject = null;\n        }\n        setSettings(JSON.stringify(stream.getVideoTracks().map(t => t.getSettings()), null, \"  \"));\n        el.current.srcObject = stream;\n        el.current.onloadedmetadata = () => {\n          el.current.play();\n        };\n      })\n    } catch(e) {\n      console.log(e);\n      setSettings(`ERROR: ${e}`);\n    }\n\n  }, [props.constraint]);\n\n  const videoStyle = {\n    object_fit: \"scale_down\",\n    width: 320,\n    height: 180\n  }\n\n  return (\n    <div>\n      <video ref={el} style={videoStyle}></video>\n      <textarea rows={20} cols={80} contentEditable={false} readOnly={true} value={settings}></textarea>\n    </div>\n  );\n};\n\nexport default CameraViewer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CameraList from './CameraList';\nimport CameraViewer from './CameraViewer';\n\nfunction App() {\n  const [constraint, setConstraint] = useState(\"\");\n  const [actualConstraint, setActualConstraint] = useState(constraint);\n\n  const handleClick = () => {\n    setActualConstraint(constraint);\n  };\n  return (\n    <div>\n      <header>\n        <table>\n          <tbody>\n            <tr>\n              <td><CameraList></CameraList></td>\n              <td><textarea value={constraint} onChange={\n          (ev) => setConstraint(ev.target.value)}\n        rows={20} cols={80} placeholder=\"制約をJSONで書いて「反映」ボタンクリック\"></textarea></td>\n              <td><button onClick={handleClick}>反映</button></td>\n            </tr>\n            <tr><td colSpan={3}><CameraViewer constraint={actualConstraint}></CameraViewer></td></tr>\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}