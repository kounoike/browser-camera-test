{"version":3,"sources":["CameraList.tsx","CameraViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["a","navigator","mediaDevices","getUserMedia","video","audio","enumerateDevices","CameraList","useState","devices","setDevices","cameraList","setCameraList","useEffect","getCameraList","then","filter","d","kind","map","label","value","deviceId","contentEditable","CameraViewer","props","el","useRef","document","createElement","settings","setSettings","constraint","length","JSON","parse","console","log","stream","oldStream","current","srcObject","getVideoTracks","forEach","c","stop","stringify","t","getSettings","onloadedmetadata","play","e","ref","style","object_fit","width","height","rows","cols","App","setConstraint","actualConstraint","setActualConstraint","onChange","ev","target","placeholder","onClick","colSpan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uTAEA,sBAAAA,EAAA,sEACQC,UAAUC,aAAaC,aAAa,CACxCC,OAAO,EACPC,OAAO,IAHX,gCAKSJ,UAAUC,aAAaI,oBALhC,4C,sBAuCeC,MA/Bf,WAAuB,IAAD,EACUC,mBAA4B,IADtC,mBACbC,EADa,KACJC,EADI,OAEgBF,mBAAS,IAFzB,mBAEbG,EAFa,KAEDC,EAFC,KAuBpB,OAnBAC,qBAAU,Y,2CACRC,GAAgBC,MAAK,SAACN,GAAD,OAA+BC,EAAWD,QAC9D,IACHI,qBAAU,WACRD,EAAcH,EAAQO,QAAO,SAAAC,GAAC,MAAe,eAAXA,EAAEC,QACjCC,KAAI,SAAAF,GAAC,OACR,+BACE,6BAAKA,EAAEG,QACP,6BAAI,0BAAUC,MAAK,4CAENJ,EAAEK,SAFI,qDAMrBC,iBAAiB,QARRN,EAAEK,gBAWV,CAACb,IAGF,kCACE,gCAAO,+BAAI,oDAAY,+CACvB,gCAAQE,QCWCa,EAzCuB,SAAAC,GACpC,IAAMC,EAAKC,iBAAOC,SAASC,cAAc,UADI,EAEbrB,mBAAS,wEAFI,mBAEtCsB,EAFsC,KAE5BC,EAF4B,KAI7ClB,qBAAU,WACR,IACE,GAAgC,IAA5BY,EAAMO,WAAWC,OAAc,OACnC,IAAMD,EAAaE,KAAKC,MAAMV,EAAMO,YACpCI,QAAQC,IAAIL,GACZ/B,UAAUC,aAAaC,aAAa6B,GAAYjB,MAAK,SAAAuB,GACnDF,QAAQC,IAAI,iBACZ,IAAME,EAAYb,EAAGc,QAAQC,UAC1BF,GACDA,EAAUG,iBAAiBC,SAAQ,SAAAC,GAAC,OAAIA,EAAEC,UAE5Cd,EAAYG,KAAKY,UAAUR,EAAOI,iBAAiBvB,KAAI,SAAA4B,GAAC,OAAIA,EAAEC,iBAAgB,KAAM,OACpFtB,EAAGc,QAAQC,UAAYH,EACvBZ,EAAGc,QAAQS,iBAAmB,WAC5BvB,EAAGc,QAAQU,WAGf,MAAMC,GACNf,QAAQC,IAAIc,MAGb,CAAC1B,EAAMO,aAQV,OACE,gCACE,uBAAOoB,IAAK1B,EAAI2B,MARD,CACjBC,WAAY,aACZC,MAAO,IACPC,OAAQ,OAMN,0BAAUC,KAAM,GAAIC,KAAM,GAAInC,iBAAiB,EAAOF,MAAOS,QCVpD6B,MA3Bf,WAAgB,IAAD,EACuBnD,mBAAS,IADhC,mBACNwB,EADM,KACM4B,EADN,OAEmCpD,mBAASwB,GAF5C,mBAEN6B,EAFM,KAEYC,EAFZ,KAOb,OACE,8BACE,iCACE,gCACE,kCACE,+BACE,6BAAI,cAAC,EAAD,MACJ,6BAAI,0BAAUzC,MAAOW,EAAY+B,SACrC,SAACC,GAAD,OAAQJ,EAAcI,EAAGC,OAAO5C,QAClCoC,KAAM,GAAIC,KAAM,GAAIQ,YAAY,uHAC1B,6BAAI,wBAAQC,QAbJ,WAClBL,EAAoB9B,IAYN,+BAEN,6BAAI,oBAAIoC,QAAS,EAAb,SAAgB,cAAC,EAAD,CAAcpC,WAAY6B,kBCV3CQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnD,SAASoD,eAAe,SAM1BX,M","file":"static/js/main.b5f2d47c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nasync function getCameraList(): Promise<MediaDeviceInfo[]> {\n  await navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: false\n  });\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction CameraList() {\n  const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\n  const [cameraList, setCameraList] = useState([] as any[]);\n  \n  useEffect(() => {\n    getCameraList().then((devices:MediaDeviceInfo[]) => setDevices(devices));\n  }, []);\n  useEffect(() => {\n    setCameraList(devices.filter(d => d.kind === 'videoinput')\n      .map(d => \n    <tr key={d.deviceId}>\n      <td>{d.label}</td>\n      <td><textarea value={`{\n  \"video\": {\n    \"deviceId\": \"${d.deviceId}\",\n    \"width\": 1280,\n    \"height\": 720\n  }\n}`} contentEditable={false}></textarea></td>\n    </tr>\n    ));\n  }, [devices])\n\n  return (\n    <table>\n      <thead><tr><th>ラベル</th><th>deviceId</th></tr></thead>\n      <tbody>{cameraList}</tbody>\n    </table>\n  );\n}\n\nexport default CameraList;\n","import React, { useEffect, useRef, useState } from 'react';\n\ntype Props = {\n  constraint: string;\n}\n\nconst CameraViewer: React.FC<Props> = props => {\n  const el = useRef(document.createElement(\"video\"));\n  const [settings, setSettings] = useState(\"ここにVideoTrackのsettings()が出ます\");\n\n  useEffect(() => {\n    try{\n      if (props.constraint.length === 0) return;\n      const constraint = JSON.parse(props.constraint);\n      console.log(constraint);\n      navigator.mediaDevices.getUserMedia(constraint).then(stream => {\n        console.log(\"Stream opened\");\n        const oldStream = el.current.srcObject as MediaStream;\n        if(oldStream) {\n          oldStream.getVideoTracks().forEach(c => c.stop());\n        }\n        setSettings(JSON.stringify(stream.getVideoTracks().map(t => t.getSettings()), null, \"  \"));\n        el.current.srcObject = stream;\n        el.current.onloadedmetadata = () => {\n          el.current.play();\n        };\n      })\n    } catch(e) {\n      console.log(e);\n    }\n\n  }, [props.constraint]);\n\n  const videoStyle = {\n    object_fit: \"scale_down\",\n    width: 320,\n    height: 180\n  }\n\n  return (\n    <div>\n      <video ref={el} style={videoStyle}></video>\n      <textarea rows={20} cols={80} contentEditable={false} value={settings}></textarea>\n    </div>\n  );\n};\n\nexport default CameraViewer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CameraList from './CameraList';\nimport CameraViewer from './CameraViewer';\n\nfunction App() {\n  const [constraint, setConstraint] = useState(\"\");\n  const [actualConstraint, setActualConstraint] = useState(constraint);\n\n  const handleClick = () => {\n    setActualConstraint(constraint);\n  };\n  return (\n    <div>\n      <header>\n        <table>\n          <tbody>\n            <tr>\n              <td><CameraList></CameraList></td>\n              <td><textarea value={constraint} onChange={\n          (ev) => setConstraint(ev.target.value)}\n        rows={20} cols={80} placeholder=\"制約をJSONで書いて「反映」ボタンクリック\"></textarea></td>\n              <td><button onClick={handleClick}>反映</button></td>\n            </tr>\n            <tr><td colSpan={3}><CameraViewer constraint={actualConstraint}></CameraViewer></td></tr>\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}